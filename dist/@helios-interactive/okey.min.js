/*Keyboard v1.0.6*/
if (!exports) var exports = {};

!function(exports, global) {
    "use strict";
    function splice(str, index, count, add) {
        return str.slice(0, index) + (add || "") + str.slice(index + count);
    }
    function checkSelectionSupport(type) {
        return -1 != [ "text", "search", "URL", "tel", "password" ].indexOf(type);
    }
    function Element(Keyboard, el) {
        function dispatchEvent(event, keyInfo) {
            var event = new KeyboardEvent(event, {
                key: keyInfo.symbol,
                code: "Key" + keyInfo.symbol,
                keyCode: keyInfo.symbol.charCodeAt(0),
                which: keyInfo.symbol.charCodeAt(0),
                altKey: !1,
                ctrlKey: !1,
                shiftKey: !1,
                metaKey: !1
            });
            event.virtual = !0, el.dispatchEvent(event);
        }
        this.Keyboard = Keyboard, el.layout = global.Keyboard.layout[el.type] ? el.type : "_default", 
        this.onEvent = function(keyInfo) {
            dispatchEvent("keydown", keyInfo);
        }, this.keydownfunc = function(e) {
            if (e.virtual) {
                e.preventDefault();
                var selectionSupported = checkSelectionSupport(this.type);
                if ("backspace" != e.key) {
                    if (!(this.value.length >= this.maxLength && -1 != this.maxLength)) {
                        var update = e.key || String.fromCharCode(e.keyCode);
                        if (("sentence" === e.target.dataset.case && (0 === this.value.length || "." === this.value.slice(-1) || ". " === this.value.slice(-2)) || "capitalize" === e.target.dataset.case && " " === this.value.slice(-1)) && (update = update.toUpperCase()), 
                        selectionSupported) {
                            var pos = el.selectionStart + update.length;
                            this.value = splice(this.value, el.selectionStart, el.selectionEnd - el.selectionStart, update), 
                            this.setSelectionRange(pos, pos);
                        } else this.value += update;
                        this.scrollLeft = this.scrollWidth;
                    }
                } else if (selectionSupported) {
                    var pos = el.selectionStart, offset = el.selectionEnd - el.selectionStart ? 0 : 1;
                    this.value = this.value.substring(0, el.selectionStart - offset) + this.value.slice(el.selectionEnd), 
                    this.setSelectionRange(pos - offset, pos - offset);
                } else this.value = this.value.slice(0, -1);
            }
        }, el.addEventListener("focus", this.focus.bind(this)), el.addEventListener("blur", this.blur.bind(this)), 
        el.addEventListener("keydown", this.keydownfunc);
    }
    function Keyboard(inputs, holder) {
        var self = this;
        Array.prototype.slice.call(inputs, 0).forEach(function(input) {
            input.Keyboard = new Element(self, input);
        }), this.active = !1, this.listeners = {
            key: []
        }, this.keyboardEl = null, this.layout = null, this.keyboardEl = document.createElement("div"), 
        this.keyboardEl.classList.add("keyboard-container"), this.keyboardEl.addEventListener("mousedown", handleKeyboardEvents.bind(this)), 
        this.show = function(layout) {
            function foreachLayout(row, rowIndex, layout) {
                function foreachRow(key, keyIndex, row) {
                    var keyEl = document.createElement("div");
                    keyEl.classList.add("keyboard-key"), keyEl.classList.add("keyboard-key--" + keyIndex);
                    for (var dataName in key) switch (dataName) {
                      case "symbol":
                        key.label || (keyEl.innerHTML = key[dataName]), keyEl.dataset.symbol = key[dataName];
                        break;

                      case "label":
                        keyEl.innerHTML = key[dataName];
                        break;

                      default:
                        keyEl.dataset[dataName] = key[dataName];
                    }
                    rowEl.appendChild(keyEl);
                }
                var rowEl = document.createElement("div");
                rowEl.classList.add("keyboard-row"), rowEl.classList.add("keyboard-row--" + rowIndex), 
                row.forEach(foreachRow), self.keyboardEl.appendChild(rowEl);
            }
            if (!global.Keyboard.layout[layout]) throw new Error("keyboard initiation: Missing layout: " + layout);
            if (!self.layout || layout !== self.layout || !this.active) {
                this.active = !0, self.layout = layout, this.keyboardEl.innerHTML = "", this.keyboardEl.classList.remove("keyboard-container-hidden");
                var closeButton = document.createElement("span");
                closeButton.classList.add("keyboard-close-button"), closeButton.innerHTML = "✖", 
                this.keyboardEl.appendChild(closeButton), closeButton.onclick = function() {
                    document.activeElement.blur();
                }.bind(this), closeButton.ontouchstart = function() {
                    document.activeElement.blur();
                }.bind(this), global.Keyboard.layout[self.layout].forEach(foreachLayout), holder.appendChild(self.keyboardEl);
            }
        }, this.hide = function() {
            self.active = !1, setTimeout(function() {
                self.active || (self.keyboardEl.classList.add("keyboard-container-hidden"), self.keyboardEl.innerHTML = "");
            }, 25);
        }, this.on = function(evt, action) {
            this.listeners[evt] || (this.listeners[evt] = []), this.listeners[evt].push(action);
        }, this.off = function(evt, action) {
            this.listeners[evt] && (this.listeners[evt] = this.listeners[evt].filter(function(listener) {
                return action.toString() !== listener.toString();
            }));
        }, this.add = function(inputs) {
            Array.isArray(inputs) || (inputs = [ inputs ]), Array.prototype.slice.call(inputs, 0).forEach(function(input) {
                input.Keyboard = new Element(self, input);
            });
        };
    }
    Element.prototype.focus = function(e) {
        this.Keyboard.show(e.target.layout), this.Keyboard.on("key", this.onEvent);
    }, Element.prototype.blur = function(e) {
        this.Keyboard.hide(e.target.layout), this.Keyboard.off("key", this.onEvent);
    };
    var handleKeyboardEvents = function(e) {
        var self = this;
        if (e.preventDefault(), e.target.classList.contains("keyboard-key")) {
            var keyInfo = e.target.dataset;
            self.listeners.key.forEach(function(action) {
                action(keyInfo);
            });
        }
    };
    global.Keyboard = Keyboard, global.Keyboard.layout = {
        _default: [ [ {
            symbol: "Q"
        }, {
            symbol: "W"
        }, {
            symbol: "E"
        }, {
            symbol: "R"
        }, {
            symbol: "T"
        }, {
            symbol: "Y"
        }, {
            symbol: "U"
        }, {
            symbol: "I"
        }, {
            symbol: "O"
        }, {
            symbol: "P"
        }, {
            label: ".com",
            symbol: ".COM"
        }, {
            symbol: "7"
        }, {
            symbol: "8"
        }, {
            symbol: "9"
        }, {
            label: "⇦",
            symbol: "backspace"
        } ], [ {
            symbol: "A"
        }, {
            symbol: "S"
        }, {
            symbol: "D"
        }, {
            symbol: "F"
        }, {
            symbol: "G"
        }, {
            symbol: "H"
        }, {
            symbol: "J"
        }, {
            symbol: "K"
        }, {
            symbol: "L"
        }, {
            symbol: "@"
        }, {
            label: ".net",
            symbol: ".NET"
        }, {
            symbol: "4"
        }, {
            symbol: "5"
        }, {
            symbol: "6"
        } ], [ {
            symbol: "Z"
        }, {
            symbol: "X"
        }, {
            symbol: "C"
        }, {
            symbol: "V"
        }, {
            symbol: "B"
        }, {
            symbol: "N"
        }, {
            symbol: "M"
        }, {
            symbol: "."
        }, {
            symbol: "_"
        }, {
            symbol: "-"
        }, {
            symbol: " ",
            label: "space"
        }, {
            symbol: "0"
        }, {
            symbol: "1"
        }, {
            symbol: "2"
        }, {
            symbol: "3"
        } ] ]
    };
}(0, window);